"""sai_pkg007 - Venomoussaversai init file

Auto-generated by GPT-5 (Venomoussaversai mode).
Package: sai_pkg007
Creator: Ananthu Sajeev
Purpose: Placeholder package init for Venomoussaversai project.
Generated: 2025-08-27
"""

# Package metadata
__version__ = "0.1.0"
__author__ = "Ananthu Sajeev"
__package_role__ = "sai_component"

# Example of package-level state that might be used by Venomoussaversai
_state = {
    "synced_with": "Venomoussaversai",
    "created_at": "2025-08-27",
    "notes": "Auto-generated init for package sai_pkg007"
}

def info():
    """Return a short info dict about this package."""
    return {
        "package": "sai_pkg007",
        "version": __version__,
        "author": __author__,
        "role": __package_role__,
        "notes": _state["notes"]
    }

# Hook for Venomoussaversai discovery
try:
    from importlib import metadata as _meta
    __dist_name__ = _meta.metadata(__package__) if __package__ else None
except Exception:
    __dist_name__ = None

# Minimal safety: do not run heavy initialization on import.
__initialized__ = False

def initialize():
    """Lightweight initialization hook for runtime -- safe to call repeatedly."""
    global __initialized__
    if __initialized__:
        return False
    # Place lightweight setup here (no blocking / heavy IO).
    __initialized__ = True
    return True
import json
import os
from datetime import datetime

# --- Configuration ---
TASKS_FILE = "tasks.json"
LOG_FILE = "activity_log.txt"

# --- Helper Functions ---

def log_activity(message):
    """Appends a timestamped message to the activity log file."""
    try:
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        with open(LOG_FILE, 'a', encoding='utf-8') as log_f:
            log_f.write(f"[{timestamp}] {message}\n")
        print(f"Logged activity: {message}")
    except IOError as e:
        print(f"Error writing to log file '{LOG_FILE}': {e}")

def load_tasks():
    """Loads tasks from a JSON file. Returns an empty list if file not found or empty/invalid JSON."""
    if not os.path.exists(TASKS_FILE):
        log_activity(f"'{TASKS_FILE}' not found. Initializing with empty tasks.")
        return []

    try:
        with open(TASKS_FILE, 'r', encoding='utf-8') as f:
            tasks = json.load(f)
            log_activity(f"Tasks loaded successfully from '{TASKS_FILE}'.")
            # Ensure loaded data is a list; otherwise, return empty
            if not isinstance(tasks, list):
                print(f"Warning: '{TASKS_FILE}' content is not a list. Initializing with empty tasks.")
                return []
            return tasks
    except json.JSONDecodeError as e:
        print(f"Error decoding JSON from '{TASKS_FILE}': {e}")
        log_activity(f"Error decoding JSON from '{TASKS_FILE}': {e}. Reverting to empty tasks.")
        return []
    except Exception as e:
        print(f"An unexpected error occurred while loading tasks: {e}")
        log_activity(f"Unexpected error loading tasks: {e}. Reverting to empty tasks.")
        return []

def save_tasks(tasks):
    """Saves tasks to a JSON file."""
    try:
        with open(TASKS_FILE, 'w', encoding='utf-8') as f:
            json.dump(tasks, f, indent=4) # indent for pretty printing
        log_activity(f"Tasks saved successfully to '{TASKS_FILE}'.")
    except IOError as e:
        print(f"Error writing to tasks file '{TASKS_FILE}': {e}")
        log_activity(f"Error writing to tasks file '{TASKS_FILE}': {e}")
    except Exception as e:
        print(f"An unexpected error occurred while saving tasks: {e}")
        log_activity(f"Unexpected error saving tasks: {e}")

def display_tasks(tasks):
    """Prints the current list of tasks."""
    if not tasks:
        print("\nNo tasks found. Add some!")
        return

    print("\n--- Your Tasks ---")
    for i, task in enumerate(tasks):
        status = "✅" if task.get("completed", False) else "⏳"
        print(f"{i+1}. {status} {task['description']}")
    print("------------------")

def add_task(tasks):
    """Prompts user for a new task and adds it to the list."""
    description = input("Enter new task description: ").strip()
    if description:
        new_task = {"description": description, "completed": False}
        tasks.append(new_task)
        print(f"Task '{description}' added.")
        log_activity(f"Added task: '{description}'")
    else:
        print("Task description cannot be empty.")

def mark_task_complete(tasks):
    """Marks a task as complete based on user input index."""
    if not tasks:
        print("No tasks to mark complete.")
        return

    display_tasks(tasks) # Show tasks with numbers
    try:
        task_index_str = input("Enter the number of the task to mark as complete: ").strip()
        task_index = int(task_index_str) - 1 # Convert to 0-based index

        if 0 <= task_index < len(tasks):
            if not tasks[task_index]["completed"]:
                tasks[task_index]["completed"] = True
                print(f"Task '{tasks[task_index]['description']}' marked as complete.")
                log_activity(f"Marked task complete: '{tasks[task_index]['description']}'")
            else:
                print(f"Task '{tasks[task_index]['description']}' is already complete.")
        else:
            print("Invalid task number. Please enter a number from the list.")
    except ValueError:
        print("Invalid input. Please enter a number.")
    except Exception as e:
        print(f"An error occurred: {e}")

# --- Main Application Logic ---

def main_menu():
    """Displays the main menu and handles user choices."""
    tasks = load_tasks() # Load tasks at the start

    while True:
        print("\n--- Task Manager Menu ---")
        print("1. View Tasks")
        print("2. Add New Task")
        print("3. Mark Task Complete")
        print("4. Save and Exit")
        print("5. Exit Without Saving")
        print("-------------------------")

        choice = input("Enter your choice (1-5): ").strip()

        if choice == '1':
            display_tasks(tasks)
        elif choice == '2':
            add_task(tasks)
        elif choice == '3':
            mark_task_complete(tasks)
        elif choice == '4':
            save_tasks(tasks)
            print("Tasks saved. Exiting Task Manager. Goodbye!")
            log_activity("Application exited with saving.")
            break
        elif choice == '5':
            print("Exiting Task Manager without saving changes. Goodbye!")
            log_activity("Application exited without saving.")
            break
        else:
            print("Invalid choice. Please enter a number between 1 and 5.")

# --- Entry Point ---
if __name__ == "__main__":
    print("Welcome to the All-in-One Task Manager!")
    main_menu()

